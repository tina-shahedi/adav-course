NonresponseReason = sample(c('Refused', 'Not reachable', 'Incomplete survey', NA), 5000, replace = TRUE, prob = c(0.1, 0.15, 0.05, 0.7)),
ContactAttempts = sample(1:5, 5000, replace = TRUE)
)
survey_data$SurveyWeight <- survey_data$SurveyWeight / sum(survey_data$SurveyWeight)
survey_data <- data.frame(
ClusterID = sample(1:100, 5000, replace = TRUE),
AgeGroup = sample(c('18-29', '30-44', '45-59', '60+'), 5000, replace = TRUE),
Gender = sample(c('Male', 'Female', 'Other'), 5000, replace = TRUE),
Region = sample(c('Northeast', 'Midwest', 'South', 'West'), 5000, replace = TRUE),
InclusionProb = runif(5000, 0.01, 0.05),
SurveyWeight = runif(5000, 0.5, 2),
ResponseStatus = sample(c(1, 0), 5000, replace = TRUE, prob = c(0.7, 0.3)),
NonresponseReason = sample(c('Refused', 'Not reachable', 'Incomplete survey', NA), 5000, replace = TRUE, prob = c(0.1, 0.15, 0.05, 0.7)),
ContactAttempts = sample(1:5, 5000, replace = TRUE)
)
survey_data <- data.frame(
ClusterID = sample(1:100, 5000, replace = TRUE),
AgeGroup = sample(c('18-29', '30-44', '45-59', '60+'), 5000, replace = TRUE),
Gender = sample(c('Male', 'Female', 'Other'), 5000, replace = TRUE),
Region = sample(c('Northeast', 'Midwest', 'South', 'West'), 5000, replace = TRUE),
InclusionProb = runif(5000, 0.01, 0.05),
SurveyWeight = runif(5000, 0.5, 2),
ResponseStatus = sample(c(1, 0), 5000, replace = TRUE, prob = c(0.7, 0.3)),
NonresponseReason = sample(c('Refused', 'Not reachable', 'Incomplete survey', NA), 5000, replace = TRUE, prob = c(0.1, 0.15, 0.05, 0.7)),
ContactAttempts = sample(1:5, 5000, replace = TRUE)
)
survey_data <- data.frame(
ClusterID = sample(1:100, 5000, replace = TRUE),
AgeGroup = sample(c('18-29', '30-44', '45-59', '60+'), 5000, replace = TRUE),
Gender = sample(c('Male', 'Female', 'Other'), 5000, replace = TRUE),
Region = sample(c('Northeast', 'Midwest', 'South', 'West'), 5000, replace = TRUE),
InclusionProb = runif(5000, 0.01, 0.05),
SurveyWeight = runif(5000, 0.5, 2),
ResponseStatus = sample(c(1, 0), 5000, replace = TRUE, prob = c(0.7, 0.3)),
NonresponseReason = sample(c('Refused', 'Not reachable', 'Incomplete survey', NA), 5000, replace = TRUE, prob = c(0.1, 0.15, 0.05, 0.7)),
ContactAttempts = sample(1:5, 5000, replace = TRUE)
)
survey_data <- data.frame(
ClusterID = sample(1:100, 5000, replace = TRUE),
AgeGroup = sample(c('18-29', '30-44', '45-59', '60+'), 5000, replace = TRUE),
Gender = sample(c('Male', 'Female', 'Other'), 5000, replace = TRUE),
Region = sample(c('Northeast', 'Midwest', 'South', 'West'), 5000, replace = TRUE),
InclusionProb = runif(5000, 0.01, 0.05),
SurveyWeight = runif(5000, 0.5, 2),
ResponseStatus = sample(c(1, 0), 5000, replace = TRUE, prob = c(0.7, 0.3)),
NonresponseReason = sample(c('Refused', 'Not reachable', 'Incomplete survey', NA), 5000, replace = TRUE, prob = c(0.1, 0.15, 0.05, 0.7)),
ContactAttempts = sample(1:5, 5000, replace = TRUE)
)
library(survey)
# Create the survey design object
survey_design <- svydesign(
id = ~ClusterID,
strata = ~AgeGroup + Gender + Region,
weights = ~SurveyWeight,
data = survey_data,
fpc = ~InclusionProb
)
library(survey)
# Create the survey design object
survey_design <- svydesign(
id = ~ClusterID,
strata = ~AgeGroup + Gender + Region,
weights = ~SurveyWeight,
data = survey_data,
fpc = ~InclusionProb
)
library(survey)
# Create the survey design object
survey_design <- svydesign(
id = ~ClusterID,
strata = ~AgeGroup + Gender + Region,
weights = ~SurveyWeight,
data = survey_data,
fpc = ~InclusionProb
)
survey_data <- data.frame(
ClusterID = sample(1:100, 5000, replace = TRUE),
AgeGroup = sample(c('18-29', '30-44', '45-59', '60+'), 5000, replace = TRUE),
Gender = sample(c('Male', 'Female', 'Other'), 5000, replace = TRUE),
Region = sample(c('Northeast', 'Midwest', 'South', 'West'), 5000, replace = TRUE),
InclusionProb = runif(5000, 0.01, 0.05),
SurveyWeight = runif(5000, 0.5, 2),
ResponseStatus = sample(c(1, 0), 5000, replace = TRUE, prob = c(0.7, 0.3)),
NonresponseReason = sample(c('Refused', 'Not reachable', 'Incomplete survey', NA), 5000, replace = TRUE, prob = c(0.1, 0.15, 0.05, 0.7)),
ContactAttempts = sample(1:5, 5000, replace = TRUE)
)
library(survey)
# Create the survey design object
survey_design <- svydesign(
id = ~ClusterID,
strata = ~AgeGroup + Gender + Region,
weights = ~SurveyWeight,
data = survey_data,
fpc = ~InclusionProb
)
# Load necessary library
library(survey)
# Create the survey design object with nesting
survey_design <- svydesign(
id = ~ClusterID,
strata = ~AgeGroup + Gender + Region,
weights = ~SurveyWeight,
data = survey_data,
fpc = ~InclusionProb,
nest = TRUE
)
# Adjust for nonresponse
# Create response propensity model (logistic regression example)
response_model <- glm(ResponseStatus ~ AgeGroup + Gender + Region + ContactAttempts, data = survey_data, family = binomial)
# Predict response probabilities
survey_data$response_prob <- predict(response_model, type = "response")
# Adjust weights for nonresponse
survey_data$adjusted_weights <- survey_data$SurveyWeight / survey_data$response_prob
# Update the survey design with adjusted weights
survey_design_adj <- update(survey_design, weights = ~adjusted_weights)
survey_data <- data.frame(
ClusterID = sample(1:100, 5000, replace = TRUE),
AgeGroup = sample(c('18-29', '30-44', '45-59', '60+'), 5000, replace = TRUE),
Gender = sample(c('Male', 'Female', 'Other'), 5000, replace = TRUE),
Region = sample(c('Northeast', 'Midwest', 'South', 'West'), 5000, replace = TRUE),
InclusionProb = runif(5000, 0.01, 0.05),
SurveyWeight = runif(5000, 0.5, 2),
ResponseStatus = sample(c(1, 0), 5000, replace = TRUE, prob = c(0.7, 0.3)),
NonresponseReason = sample(c('Refused', 'Not reachable', 'Incomplete survey', NA), 5000, replace = TRUE, prob = c(0.1, 0.15, 0.05, 0.7)),
ContactAttempts = sample(1:5, 5000, replace = TRUE)
)
# Load necessary library
library(survey)
# Create the survey design object with nesting
survey_design <- svydesign(
id = ~ClusterID,
strata = ~AgeGroup + Gender + Region,
weights = ~SurveyWeight,
data = survey_data,
fpc = ~InclusionProb,
nest = TRUE
)
# Adjust for nonresponse
# Create response propensity model (logistic regression example)
response_model <- glm(ResponseStatus ~ AgeGroup + Gender + Region + ContactAttempts, data = survey_data, family = binomial)
# Predict response probabilities
survey_data$response_prob <- predict(response_model, type = "response")
# Adjust weights for nonresponse
survey_data$adjusted_weights <- survey_data$SurveyWeight / survey_data$response_prob
# Update the survey design with adjusted weights
survey_design_adj <- update(survey_design, weights = ~adjusted_weights)
# Load necessary library
library(survey)
# Create the survey design object with nesting
survey_design <- svydesign(
id = ~ClusterID,
strata = ~AgeGroup + Gender + Region,
weights = ~SurveyWeight,
data = survey_data,
fpc = ~InclusionProb,
nest = TRUE
)
# Adjust for nonresponse
# Create response propensity model (logistic regression example)
response_model <- glm(ResponseStatus ~ AgeGroup + Gender + Region + ContactAttempts, data = survey_data, family = binomial)
# Predict response probabilities
survey_data$response_prob <- predict(response_model, type = "response")
# Adjust weights for nonresponse
survey_data$adjusted_weights <- survey_data$SurveyWeight / survey_data$response_prob
# Update the survey design with adjusted weights
survey_design_adj <- update(survey_design, weights = ~adjusted_weights)
# Load necessary library
library(survey)
# Create the survey design object with nesting
survey_design <- svydesign(
id = ~ClusterID,
strata = ~AgeGroup + Gender + Region,
weights = ~SurveyWeight,
data = survey_data,
fpc = ~InclusionProb,
nest = TRUE
)
# Adjust for nonresponse
# Create response propensity model (logistic regression example)
response_model <- glm(ResponseStatus ~ AgeGroup + Gender + Region + ContactAttempts, data = survey_data, family = binomial)
# Predict response probabilities
survey_data$response_prob <- predict(response_model, type = "response")
# Adjust weights for nonresponse
survey_data$adjusted_weights <- survey_data$SurveyWeight / survey_data$response_prob
# Update the survey design with adjusted weights
survey_design_adj <- update(survey_design, weights = ~adjusted_weights)
survey_data <- data.frame(
ClusterID = sample(1:100, 5000, replace = TRUE),
AgeGroup = sample(c('18-29', '30-44', '45-59', '60+'), 5000, replace = TRUE),
Gender = sample(c('Male', 'Female', 'Other'), 5000, replace = TRUE),
Region = sample(c('Northeast', 'Midwest', 'South', 'West'), 5000, replace = TRUE),
InclusionProb = runif(5000, 0.01, 0.05),
SurveyWeight = runif(5000, 0.5, 2),
ResponseStatus = sample(c(1, 0), 5000, replace = TRUE, prob = c(0.7, 0.3)),
NonresponseReason = sample(c('Refused', 'Not reachable', 'Incomplete survey', NA), 5000, replace = TRUE, prob = c(0.1, 0.15, 0.05, 0.7)),
ContactAttempts = sample(1:5, 5000, replace = TRUE)
)
# Load necessary library
library(survey)
# Create the survey design object without fpc
survey_design <- svydesign(
id = ~ClusterID,
strata = ~AgeGroup + Gender + Region,
weights = ~SurveyWeight,
data = survey_data,
nest = TRUE
)
# Adjust for nonresponse
# Create response propensity model (logistic regression example)
response_model <- glm(ResponseStatus ~ AgeGroup + Gender + Region + ContactAttempts, data = survey_data, family = binomial)
# Predict response probabilities
survey_data$response_prob <- predict(response_model, type = "response")
# Adjust weights for nonresponse
survey_data$adjusted_weights <- survey_data$SurveyWeight / survey_data$response_prob
# Create a new survey design object with adjusted weights
survey_design_adj <- svydesign(
id = ~ClusterID,
strata = ~AgeGroup + Gender + Region,
weights = ~adjusted_weights,
data = survey_data,
nest = TRUE
)
# Now, survey_design_adj can be used for further analysis with corrections for both inclusion probabilities and unit nonresponse
survey_data <- data.frame(
ClusterID = sample(1:100, 5000, replace = TRUE),
AgeGroup = sample(c('18-29', '30-44', '45-59', '60+'), 5000, replace = TRUE),
Gender = sample(c('Male', 'Female', 'Other'), 5000, replace = TRUE),
Region = sample(c('Northeast', 'Midwest', 'South', 'West'), 5000, replace = TRUE),
InclusionProb = runif(5000, 0.01, 0.05),
SurveyWeight = runif(5000, 0.5, 2),
ResponseStatus = sample(c(1, 0), 5000, replace = TRUE, prob = c(0.7, 0.3)),
NonresponseReason = sample(c('Refused', 'Not reachable', 'Incomplete survey', NA), 5000, replace = TRUE, prob = c(0.1, 0.15, 0.05, 0.7)),
ContactAttempts = sample(1:5, 5000, replace = TRUE)
)
# Load necessary library
library(survey)
# Create the survey design object without fpc
survey_design <- svydesign(
id = ~ClusterID,
strata = ~AgeGroup + Gender + Region,
weights = ~SurveyWeight,
data = survey_data,
nest = TRUE
)
# Adjust for nonresponse
# Create response propensity model (logistic regression example)
response_model <- glm(ResponseStatus ~ AgeGroup + Gender + Region + ContactAttempts, data = survey_data, family = binomial)
# Predict response probabilities
survey_data$response_prob <- predict(response_model, type = "response")
# Adjust weights for nonresponse
survey_data$adjusted_weights <- survey_data$SurveyWeight / survey_data$response_prob
# Create a new survey design object with adjusted weights
survey_design_adj <- svydesign(
id = ~ClusterID,
strata = ~AgeGroup + Gender + Region,
weights = ~adjusted_weights,
data = survey_data,
nest = TRUE
)
# Now, survey_design_adj can be used for further analysis with corrections for both inclusion probabilities and unit nonresponse
View(survey_design_adj)
View(survey_design_adj)
View(survey_design_adj)
View(survey_design)
View(survey_design_adj)
View(survey_design_adj)
View(survey_design)
View(survey_design)
View(survey_design)
View(survey_design)
View(survey_design_adj)
View(survey_design_adj)
survey_data <- data.frame(
ClusterID = sample(1:100, 5000, replace = TRUE),
AgeGroup = sample(c('18-29', '30-44', '45-59', '60+'), 5000, replace = TRUE),
Gender = sample(c('Male', 'Female', 'Other'), 5000, replace = TRUE),
Region = sample(c('Northeast', 'Midwest', 'South', 'West'), 5000, replace = TRUE),
InclusionProb = runif(5000, 0.01, 0.05),
SurveyWeight = runif(5000, 0.5, 2),
ResponseStatus = sample(c(1, 0), 5000, replace = TRUE, prob = c(0.7, 0.3)),
NonresponseReason = sample(c('Refused', 'Not reachable', 'Incomplete survey', NA), 5000, replace = TRUE, prob = c(0.1, 0.15, 0.05, 0.7)),
ContactAttempts = sample(1:5, 5000, replace = TRUE)
)
# Load necessary library
library(survey)
# Create the survey design object without fpc
survey_design <- svydesign(
id = ~ClusterID,
strata = ~AgeGroup + Gender + Region,
weights = ~SurveyWeight,
data = survey_data,
nest = TRUE
)
# Adjust for nonresponse
# Create response propensity model (logistic regression example)
response_model <- glm(ResponseStatus ~ AgeGroup + Gender + Region + ContactAttempts, data = survey_data, family = binomial)
# Predict response probabilities
survey_data$response_prob <- predict(response_model, type = "response")
# Adjust weights for nonresponse
survey_data$adjusted_weights <- survey_data$SurveyWeight / survey_data$response_prob
# Create a new survey design object with adjusted weights
survey_design_adj <- svydesign(
id = ~ClusterID,
strata = ~AgeGroup + Gender + Region,
weights = ~adjusted_weights,
data = survey_data,
nest = TRUE
)
# Now, survey_design_adj can be used for further analysis with corrections for both inclusion probabilities and unit nonresponse
survey_data <- data.frame(
ClusterID = sample(1:100, 5000, replace = TRUE),
AgeGroup = sample(c('18-29', '30-44', '45-59', '60+'), 5000, replace = TRUE),
Gender = sample(c('Male', 'Female', 'Other'), 5000, replace = TRUE),
Region = sample(c('Northeast', 'Midwest', 'South', 'West'), 5000, replace = TRUE),
InclusionProb = runif(5000, 0.01, 0.05),
SurveyWeight = runif(5000, 0.5, 2),
ResponseStatus = sample(c(1, 0), 5000, replace = TRUE, prob = c(0.7, 0.3)),
NonresponseReason = sample(c('Refused', 'Not reachable', 'Incomplete survey', NA), 5000, replace = TRUE, prob = c(0.1, 0.15, 0.05, 0.7)),
ContactAttempts = sample(1:5, 5000, replace = TRUE)
)
# Load necessary library
library(survey)
# Create the survey design object without fpc
survey_design <- svydesign(
id = ~ClusterID,
strata = ~AgeGroup + Gender + Region,
weights = ~SurveyWeight,
data = survey_data,
nest = TRUE
)
# Adjust for nonresponse
# Create response propensity model (logistic regression example)
response_model <- glm(ResponseStatus ~ AgeGroup + Gender + Region + ContactAttempts, data = survey_data, family = binomial)
# Predict response probabilities
survey_data$response_prob <- predict(response_model, type = "response")
# Adjust weights for nonresponse
survey_data$adjusted_weights <- survey_data$SurveyWeight / survey_data$response_prob
# Create a new survey design object with adjusted weights
survey_design_adj <- svydesign(
id = ~ClusterID,
strata = ~AgeGroup + Gender + Region,
weights = ~adjusted_weights,
data = survey_data,
nest = TRUE
)
# Now, survey_design_adj can be used for further analysis with corrections for both inclusion probabilities and unit nonresponse
survey_design
survey_data <- data.frame(
ClusterID = sample(1:100, 5000, replace = TRUE),
AgeGroup = sample(c('18-29', '30-44', '45-59', '60+'), 5000, replace = TRUE),
Gender = sample(c('Male', 'Female', 'Other'), 5000, replace = TRUE),
Region = sample(c('Northeast', 'Midwest', 'South', 'West'), 5000, replace = TRUE),
InclusionProb = runif(5000, 0.01, 0.05),
SurveyWeight = runif(5000, 0.5, 2),
ResponseStatus = sample(c(1, 0), 5000, replace = TRUE, prob = c(0.7, 0.3)),
NonresponseReason = sample(c('Refused', 'Not reachable', 'Incomplete survey', NA), 5000, replace = TRUE, prob = c(0.1, 0.15, 0.05, 0.7)),
ContactAttempts = sample(1:5, 5000, replace = TRUE)
)
# Load necessary library
library(survey)
# Create the survey design object without fpc
survey_design <- svydesign(
id = ~ClusterID,
strata = ~AgeGroup + Gender + Region,
weights = ~SurveyWeight,
data = survey_data,
nest = TRUE
)
# Adjust for nonresponse
# Create response propensity model (logistic regression example)
response_model <- glm(ResponseStatus ~ AgeGroup + Gender + Region + ContactAttempts, data = survey_data, family = binomial)
# Predict response probabilities
survey_data$response_prob <- predict(response_model, type = "response")
# Adjust weights for nonresponse
survey_data$adjusted_weights <- survey_data$SurveyWeight / survey_data$response_prob
# Create a new survey design object with adjusted weights
survey_design_adj <- svydesign(
id = ~ClusterID,
strata = ~AgeGroup + Gender + Region,
weights = ~adjusted_weights,
data = survey_data,
nest = TRUE
)
# Now, survey_design_adj can be used for further analysis with corrections for both inclusion probabilities and unit nonresponse
View(survey_design)
View(survey_data)
View(survey_design)
View(survey_design)
View(survey_design)
View(survey_design)
save.image("~/Generative AI/Survey/My Answers/assignment 2/survey_design.RData")
survey_data <- data.frame(
ClusterID = sample(1:100, 5000, replace = TRUE),
AgeGroup = sample(c('18-29', '30-44', '45-59', '60+'), 5000, replace = TRUE),
Gender = sample(c('Male', 'Female', 'Other'), 5000, replace = TRUE),
Region = sample(c('Northeast', 'Midwest', 'South', 'West'), 5000, replace = TRUE),
InclusionProb = runif(5000, 0.01, 0.05),
SurveyWeight = runif(5000, 0.5, 2),
ResponseStatus = sample(c(1, 0), 5000, replace = TRUE, prob = c(0.7, 0.3)),
NonresponseReason = sample(c('Refused', 'Not reachable', 'Incomplete survey', NA), 5000, replace = TRUE, prob = c(0.1, 0.15, 0.05, 0.7)),
ContactAttempts = sample(1:5, 5000, replace = TRUE)
)
# Load necessary library
library(survey)
# Create the survey design object without fpc
survey_design <- svydesign(
id = ~ClusterID,
strata = ~AgeGroup + Gender + Region,
weights = ~SurveyWeight,
data = survey_data,
nest = TRUE
)
# Adjust for nonresponse
# Create response propensity model (logistic regression example)
response_model <- glm(ResponseStatus ~ AgeGroup + Gender + Region + ContactAttempts, data = survey_data, family = binomial)
# Predict response probabilities
survey_data$response_prob <- predict(response_model, type = "response")
# Adjust weights for nonresponse
survey_data$adjusted_weights <- survey_data$SurveyWeight / survey_data$response_prob
# Create a new survey design object with adjusted weights
survey_design_adj <- svydesign(
id = ~ClusterID,
strata = ~AgeGroup + Gender + Region,
weights = ~adjusted_weights,
data = survey_data,
nest = TRUE
)
# Now, survey_design_adj can be used for further analysis with corrections for both inclusion probabilities and unit nonresponse
View(survey_data)
save.image("~/Generative AI/Survey/My Answers/assignment 2/Environment.RData")
# Install renv
install.packages("renv")
# Initialize renv in your project
renv::init()
y
install.packages("quarto")
install.packages("renv")
install.packages("renv")
renv::init()
y
yes
renv::init()
# R code (executed but not displayed)
plot(pressure)
# Install renv
install.packages("renv")
# Initialize renv
renv::init()
install.packages("renv")
#### 6. Detailed Explanation
- **Displayed but Not Executed R Code:**
#### 6. Detailed Explanation
- **Displayed but Not Executed R Code:**
#### 6. Detailed Explanation
```markdown
```{r, echo=FALSE}
---
title: "Course Information - Readings"
---
title: "**Readings**"
---
title: "**Readings**"
---
title: ""
---
output: html_document
---
output: html_document
---
output: html_document
---
title: ""
---
title: ""
---
output: html_document
---
title: "Course Reading List"
### **Required books**
The following books will be used during the course. For all books, a free (open source) online version is available.
---
title: "Course Reading List"
unlink("website file/adav-course/adav-course/files/reading_cache", recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages(c("rmarkdown", "knitr", "tidyverse"))
install.packages(c("rmarkdown", "knitr", "tidyverse"))
install.packages(c("rmarkdown", "knitr", "tidyverse"))
install.packages(c("rmarkdown", "knitr", "tidyverse"))
install.packages(c("rmarkdown", "knitr", "tidyverse"))
install.packages(c("rmarkdown", "knitr", "tidyverse"))
install.packages(c("rmarkdown", "knitr", "tidyverse"))
update.packages(ask = FALSE)
install.packages(c("rmarkdown", "knitr", "tidyverse"))
install.packages(c("rmarkdown", "knitr", "tidyverse"))
install.packages(c("rmarkdown", "knitr", "tidyverse"))
knitr::opts_chunk$set(echo = TRUE)
result <- lm(mpg ~ wt, data = mtcars)
plot(mpg ~ wt, data = mtcars)
abline(result, lty = 2)
install.packages(c("rmarkdown", "knitr", "tidyverse"))
install.packages("tinytex")
library(tinytex)
install_tinytex()
install.packages(c("rmarkdown", "knitr", "tidyverse"))
install.packages(c("rmarkdown", "knitr", "tidyverse"))
install.packages(c("rmarkdown", "knitr", "tidyverse"))
install.packages("tinytex")
install.packages(c("rmarkdown", "knitr", "tidyverse"))
install.packages(c("rmarkdown", "knitr", "tidyverse"))
knitr::opts_chunk$set(echo = TRUE)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
knitr::include_graphics("projects.png")
